import asyncio
import sqlite3 as sq

from config import TOKEN
import keabort as kb

from aiogram import Dispatcher, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

connection = sq.connect('school_bot.db')
cursor = connection.cursor()

cursor.execute('''
  CREATE TABLE IF NOT EXISTS Users (
  id INTEGER PRIMARY KEY,
  username TEXT NOT NULL,
  tg_id INTEGER,
  clas TEXT NOT NULL
  )
  ''')

cursor.execute('''
  CREATE TABLE IF NOT EXISTS –°omplaints (
  id INTEGER PRIMARY KEY,
  username TEXT NOT NULL,
  tg_id INTEGER,
  complaint TEXT NOT NULL
  )
  ''')

cursor.execute("""
  CREATE TABLE IF NOT EXISTS admins(
  id INTEGER PRIMARY KEY,
  tg_id_admin INTEGER NOT NULL,
  username TEXT NOT NULL,
  name TEXT NOT NULL,
  password TEXT NOT NULL
  )
  """)
connection.commit()
# –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('SELECT * FROM Users')
users = cursor.fetchall()

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
async def cmd_start_db(user_id, user_name):
    cursor.execute('SELECT COUNT(*) FROM Users')
#  total_users = cursor.fetchone()[0]
    x = 0
    for user in users:
        print(user[2])
        if user[2] == user_id:
            x += 1
    if x >= 1:
        print('–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç')
    else:
        cursor.execute('INSERT INTO Users (username, tg_id, clas) VALUES (?, ?, ?)', (user_name, user_id, '8–ë'))
        connection.commit()
        connection.close()
    # print(user[2])


bot = Bot(token=TOKEN)
dp = Dispatcher()


class Reg(StatesGroup):
    clas_user = State()
    complaints_user = State()

# –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(CommandStart())
async def reg_one(message: Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –±–æ—Ç Botintegral, –±—É–¥—É —Ä–∞–¥ –≤–∞–º –ø–æ–º–æ—á—å, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –≤–∞—Å –ø—Ä–∏–¥—É–ø—Ä–µ–¥–∏—Ç—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞ –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–≤–∞–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ–¥ –¥–∞–Ω–Ω—ã–º–∏ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ –±–æ—Ç–µ, –∞ —Ç–∞–∫–∂–µ –≤–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞', reply_markup=kb.main_kb)
    await bot.send_message(1410371678, f'–í Botintegral –∑–∞—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \n {message.from_user.full_name}'
                            f'\nID: {message.from_user.id}')
#   await state.set_state(Reg.clas_user)
    await cmd_start_db(user_id=message.from_user.id, user_name=message.from_user.full_name)


@dp.message(Command('hadm'))
async def cmd_help(message: Message, state: FSMContext):
    await state.set_state(Reg.complaints_user)
    await message.answer(text='–û–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—è –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç')
 #   cursor.execute('INSERT INTO  (username, tg_id, clas) VALUES (?, ?, ?)', (user_name, user_id, '8–ë'))


@dp.message(Reg.complaints_user)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(complaints_user=message.text)
    data = await state.get_data()
    cursor.execute('INSERT INTO –°omplaints (username, tg_id, complaint) VALUES (?, ?, ?)', (message.from_user.full_name, message.from_user.id, f'{data["complaints_user"]}'))
    await message.answer(f'–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {data["complaints_user"]}')
    connection.commit()
    await state.clear()

'''
@dp.message(F.photo)
async def cmd(message: Message):
    photo_id = message.photo[-1].file_id
    await message.reply(f'{photo_id}')
'''

@dp.message()
async def cmd_sta(message: Message):
    if message.text.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì':
        await message.answer_photo('AgACAgIAAxkBAAJ06WcyMDMWFoiCv4Lg7yV-Cf9pN34AA_3hMRvQ45hJHUhvO3SJTcsBAAMCAAN5AAM2BA')
        await message.answer('''
–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ 8–ë

–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö:
[ 8:30 - 9:10   ] –†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –Ω–µ –≤–∞–∂–Ω–æ–º
[ 9:20 - 10:00  ] –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
[ 10:10 - 10:50 ] –û–ü–î
[ 11:15 - 11:55 ] –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
[ 12:20 - 13:00 ] –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
[ 13:15 = 13:55 ] –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
[ 14:05 - 14:45 ] –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞

–í–¢–û–†–ù–ò–ö:
[ 8:30 - 9:10   ] –§—Ä–∞–Ω—Ü—É–∑–∫–∏–π —è–∑—ã–∫
[ 9:20 - 10:00  ] –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
[ 10:10 - 10:50 ] –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
[ 11:15 - 11:55 ] –•–∏–º–∏—è
[ 12:20 - 13:00 ] –†—É—Å—Å–∫–∏–π —è–∑—ã–∫

–°–†–ï–î–ê:
[ 8:30 - 9:10   ] –ò—Å—Ç–æ—Ä–∏—è 
[ 9:20 - 10:00  ] –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
[ 10:10 - 10:50 ] –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞
[ 11:15 - 11:55 ] –•–∏–º–∏—è
[ 12:20 - 13:00 ] –ê–ª–≥–µ–±—Ä–∞
[ 13:15 = 13:55 ] –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ
    
–ß–ï–¢–í–ï–†–ì:
[ 8:30 - 9:10   ] –ë–∏–æ–ª–æ–≥–∏—è
[ 9:20 - 10:00  ] –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
[ 10:10 - 10:50 ] –ú—É–∑—ã–∫–∞
[ 11:15 - 11:55 ] –ê–ª–≥–µ–±—Ä–∞
[ 12:20 - 13:00 ] –ê–ª–≥–µ–±—Ä–∞

–ü–Ø–¢–ù–ò–¶–ê:
[ 9:20 - 10:00  ] –§–∏–∑–∏–∫–∞
[ 10:10 - 10:50 ] –ì–µ–æ–º–µ—Ç—Ä–∏—è
[ 11:15 - 11:55 ] –ë–∏–æ–ª–æ–≥–∏—è
[ 12:20 - 13:00 ] –ò—Å—Ç–æ—Ä–∏—è
[ 13:15 = 13:55 ] –ò—Å—Ç–æ—Ä–∏—è

–°–£–ë–ë–û–¢–ê:
[ 8:30 - 9:10   ] –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
[ 9:20 - 10:00  ] –û–ë–ó–†
[ 10:10 - 10:50 ] –§–∏–∑–∏–∫–∞
[ 11:05 - 11:45 ] –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞
[ 12:00 - 12:40 ] –ì–µ–æ–º–µ—Ç–∏—è
[ 12:50 = 13:30 ] –¢—Ä—É–¥''')


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())