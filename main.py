import asyncio
import os
import dotenv
import logging
import sys
import sqlite3 as sq

import keyboard as kb
from SQL import *
from schedule import *
from inline_keyboard import *

from aiogram import Dispatcher, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN = os.getenv("ADMIN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

class Reg(StatesGroup):
    clas_user = State()
    complaints_user = State()

# –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(CommandStart())
async def reg_one(message: Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –±–æ—Ç Botintegral, –±—É–¥—É —Ä–∞–¥ –≤–∞–º –ø–æ–º–æ—á—å, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –≤–∞—Å –ø—Ä–∏–¥—É–ø—Ä–µ–¥–∏—Ç—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞ –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–≤–∞–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ–¥ –¥–∞–Ω–Ω—ã–º–∏ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ –±–æ—Ç–µ, –∞ —Ç–∞–∫–∂–µ –≤–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞', reply_markup=kb.main_kb)
                        #    text=f'–í Botintegral –∑–∞—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \n {message.from_user.full_name}'
                        #         f'\nID: {message.from_user.id}')
#   await state.set_state(Reg.clas_user)
    await add_user(message.from_user.full_name, message.from_user.id, "8–ë")
    await bot.send_message(chat_id=ADMIN,
                           text="gdsds")


@dp.message(Command('hadm'))
async def cmd_help(message: Message, state: FSMContext):
    await state.set_state(Reg.complaints_user)
    await message.answer(text='–û–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—è –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç')
 #   cursor.execute('INSERT INTO  (username, tg_id, clas) VALUES (?, ?, ?)', (user_name, user_id, '8–ë'))


@dp.message(Reg.complaints_user)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(complaints_user=message.text)
    data = await state.get_data()
    cursor.execute('INSERT INTO –°omplaints (username, tg_id, complaint) VALUES (?, ?, ?)', (message.from_user.full_name, message.from_user.id, f'{data["complaints_user"]}'))
    await message.answer(f'–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {data["complaints_user"]}')
    connection.commit()
    await state.clear()

'''
@dp.message(F.photo)
async def cmd(message: Message):
    photo_id = message.photo[-1].file_id
    await message.reply(f'{photo_id}')
'''

@dp.message()
async def cmd_sta(message: Message):
    if message.text.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì':
        await message.answer_photo(photo=FSInputFile("image/i.webp"),
                                   caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –Ω–∏–∂–µ: ",
                                   reply_markup=choose_class())
        # await message.answer(RASP_8B)

@dp.callback_query(F.data == "picked_8A")
async def push_schedule_8A(callback: CallbackQuery):
    await callback.message.answer("–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 8–ê: ...")
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ 8–ê")


async def main():
    await db_start()
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exit")